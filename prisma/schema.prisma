generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Tattobooking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Tattoshop {
  id          String         @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  services    Tattoservice[]
}

model Tattoservice {
  id          String         @id @default(uuid())
  name        String
  description String
  imageUrl    String
  price       Decimal        @db.Decimal(10, 2)
  tattoshopId String
  tattoshop   Tattoshop      @relation(fields: [tattoshopId], references: [id])
  bookings    Tattobooking[]
}

model Tattobooking {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  serviceId String
  service   Tattoservice @relation(fields: [serviceId], references: [id])
  date      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}
